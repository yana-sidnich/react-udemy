{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport react, { useState } from \"react\";\n\nconst useInput = validateValue => {\n  _s();\n\n  const [enteredValue, setEnteredValue] = useState(\"\");\n  const [isTouched, setIsTouched] = useState(false);\n  const valueIsValid = validateValue(enteredValue);\n  const hasError = isTouched && !valueIsValid;\n\n  const valueChangeHandler = event => {\n    setEnteredValue(event.target.value);\n  };\n\n  const valueBlurHandler = event => {\n    setIsTouched(true);\n  };\n\n  const reset = () => {};\n\n  return {\n    value: enteredValue,\n    isValid: valueIsValid,\n    hasError,\n    valueChangeHandler,\n    valueBlurHandler\n  };\n};\n\n_s(useInput, \"qlnmfbTzj9Q0H+uTzI/AGYgwaf8=\");\n\nexport default useInput;","map":{"version":3,"sources":["/home/yana/Desktop/ReactUdemy/inputForms/src/hooks/use-input.js"],"names":["react","useState","useInput","validateValue","enteredValue","setEnteredValue","isTouched","setIsTouched","valueIsValid","hasError","valueChangeHandler","event","target","value","valueBlurHandler","reset","isValid"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;;AAEA,MAAMC,QAAQ,GAAIC,aAAD,IAAmB;AAAA;;AAClC,QAAM,CAACC,YAAD,EAAeC,eAAf,IAAkCJ,QAAQ,CAAC,EAAD,CAAhD;AACA,QAAM,CAACK,SAAD,EAAYC,YAAZ,IAA4BN,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAMO,YAAY,GAAGL,aAAa,CAACC,YAAD,CAAlC;AACA,QAAMK,QAAQ,GAAGH,SAAS,IAAI,CAACE,YAA/B;;AAEA,QAAME,kBAAkB,GAAIC,KAAD,IAAW;AACpCN,IAAAA,eAAe,CAACM,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAf;AACD,GAFD;;AAGA,QAAMC,gBAAgB,GAAIH,KAAD,IAAW;AAClCJ,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACD,GAFD;;AAIA,QAAMQ,KAAK,GAAG,MAAM,CAAE,CAAtB;;AAEA,SAAO;AACLF,IAAAA,KAAK,EAAET,YADF;AAELY,IAAAA,OAAO,EAAER,YAFJ;AAGLC,IAAAA,QAHK;AAILC,IAAAA,kBAJK;AAKLI,IAAAA;AALK,GAAP;AAOD,CAtBD;;GAAMZ,Q;;AAwBN,eAAeA,QAAf","sourcesContent":["import react, { useState } from \"react\";\n\nconst useInput = (validateValue) => {\n  const [enteredValue, setEnteredValue] = useState(\"\");\n  const [isTouched, setIsTouched] = useState(false);\n  const valueIsValid = validateValue(enteredValue);\n  const hasError = isTouched && !valueIsValid;\n\n  const valueChangeHandler = (event) => {\n    setEnteredValue(event.target.value);\n  };\n  const valueBlurHandler = (event) => {\n    setIsTouched(true);\n  };\n\n  const reset = () => {};\n\n  return {\n    value: enteredValue,\n    isValid: valueIsValid,\n    hasError,\n    valueChangeHandler,\n    valueBlurHandler,\n  };\n};\n\nexport default useInput;\n"]},"metadata":{},"sourceType":"module"}