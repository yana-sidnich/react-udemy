{"ast":null,"code":"var _jsxFileName = \"/home/yana/Desktop/ReactUdemy/httpRequest/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useCallback } from \"react\";\nimport MoviesList from \"./components/MoviesList\";\nimport \"./App.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [movies, setMovies] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const fetchMovies = useCallback(async () => {\n    setIsLoading(true);\n    setError(null);\n\n    try {\n      const response = await fetch(\"https://swapi.dev/api/films/\");\n\n      if (!response.ok) {\n        throw new Error(\"wrooonnngggggg\");\n      }\n\n      const data = await response.json();\n      const myMovies = data.results.map(movieData => {\n        return {\n          id: movieData.episode_id,\n          title: movieData.title,\n          openingText: movieData.opening_crawl,\n          releaseDate: movieData.realease_date\n        };\n      }, []);\n      setMovies(myMovies);\n      setIsLoading(false);\n    } catch (error) {\n      setError(error.message);\n      setIsLoading(false);\n    }\n  });\n  useEffect(() => {\n    fetchMovies();\n    console.log(\"yana\");\n  }, [fetchMovies]);\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"section\", {\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: fetchMovies,\n        children: \"Fetch Movies\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      children: [!isLoading && /*#__PURE__*/_jsxDEV(MoviesList, {\n        movies: movies\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 24\n      }, this), !isLoading && movies.length === 0 && !error && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"no Movies\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 57\n      }, this), isLoading && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"loading\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 23\n      }, this), error && !isLoading && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 33\n      }, this), /*#__PURE__*/_jsxDEV(MoviesList, {\n        movies: movies\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"wXTTP9NtSPZCJUOtO7da5chjGt4=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/yana/Desktop/ReactUdemy/httpRequest/src/App.js"],"names":["React","useState","useEffect","useCallback","MoviesList","App","movies","setMovies","isLoading","setIsLoading","error","setError","fetchMovies","response","fetch","ok","Error","data","json","myMovies","results","map","movieData","id","episode_id","title","openingText","opening_crawl","releaseDate","realease_date","message","console","log","length"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,WAArC,QAAwD,OAAxD;AAEA,OAAOC,UAAP,MAAuB,yBAAvB;AACA,OAAO,WAAP;;;AAEA,SAASC,GAAT,GAAe;AAAA;;AACb,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBN,QAAQ,CAAC,EAAD,CAApC;AACA,QAAM,CAACO,SAAD,EAAYC,YAAZ,IAA4BR,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAM,CAACS,KAAD,EAAQC,QAAR,IAAoBV,QAAQ,CAAC,IAAD,CAAlC;AAEA,QAAMW,WAAW,GAAGT,WAAW,CAAC,YAAY;AAC1CM,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACAE,IAAAA,QAAQ,CAAC,IAAD,CAAR;;AACA,QAAI;AACF,YAAME,QAAQ,GAAG,MAAMC,KAAK,CAAC,8BAAD,CAA5B;;AACA,UAAI,CAACD,QAAQ,CAACE,EAAd,EAAkB;AAChB,cAAM,IAAIC,KAAJ,CAAU,gBAAV,CAAN;AACD;;AACD,YAAMC,IAAI,GAAG,MAAMJ,QAAQ,CAACK,IAAT,EAAnB;AACA,YAAMC,QAAQ,GAAGF,IAAI,CAACG,OAAL,CAAaC,GAAb,CAAkBC,SAAD,IAAe;AAC/C,eAAO;AACLC,UAAAA,EAAE,EAAED,SAAS,CAACE,UADT;AAELC,UAAAA,KAAK,EAAEH,SAAS,CAACG,KAFZ;AAGLC,UAAAA,WAAW,EAAEJ,SAAS,CAACK,aAHlB;AAILC,UAAAA,WAAW,EAAEN,SAAS,CAACO;AAJlB,SAAP;AAMD,OAPgB,EAOd,EAPc,CAAjB;AAQAtB,MAAAA,SAAS,CAACY,QAAD,CAAT;AACAV,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACD,KAhBD,CAgBE,OAAOC,KAAP,EAAc;AACdC,MAAAA,QAAQ,CAACD,KAAK,CAACoB,OAAP,CAAR;AACArB,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACD;AACF,GAvB8B,CAA/B;AAwBAP,EAAAA,SAAS,CAAC,MAAM;AACdU,IAAAA,WAAW;AACXmB,IAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ;AACD,GAHQ,EAGN,CAACpB,WAAD,CAHM,CAAT;AAKA,sBACE,QAAC,KAAD,CAAO,QAAP;AAAA,4BACE;AAAA,6BACE;AAAQ,QAAA,OAAO,EAAEA,WAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADF,eAIE;AAAA,iBACG,CAACJ,SAAD,iBAAc,QAAC,UAAD;AAAY,QAAA,MAAM,EAAEF;AAApB;AAAA;AAAA;AAAA;AAAA,cADjB,EAEG,CAACE,SAAD,IAAcF,MAAM,CAAC2B,MAAP,KAAkB,CAAhC,IAAqC,CAACvB,KAAtC,iBAA+C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFlD,EAIGF,SAAS,iBAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAJhB,EAKGE,KAAK,IAAI,CAACF,SAAV,iBAAuB;AAAA,kBAAIE;AAAJ;AAAA;AAAA;AAAA;AAAA,cAL1B,eAOE,QAAC,UAAD;AAAY,QAAA,MAAM,EAAEJ;AAApB;AAAA;AAAA;AAAA;AAAA,cAPF;AAAA;AAAA;AAAA;AAAA;AAAA,YAJF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAgBD;;GAlDQD,G;;KAAAA,G;AAoDT,eAAeA,GAAf","sourcesContent":["import React, { useState, useEffect, useCallback } from \"react\";\n\nimport MoviesList from \"./components/MoviesList\";\nimport \"./App.css\";\n\nfunction App() {\n  const [movies, setMovies] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  const fetchMovies = useCallback(async () => {\n    setIsLoading(true);\n    setError(null);\n    try {\n      const response = await fetch(\"https://swapi.dev/api/films/\");\n      if (!response.ok) {\n        throw new Error(\"wrooonnngggggg\");\n      }\n      const data = await response.json();\n      const myMovies = data.results.map((movieData) => {\n        return {\n          id: movieData.episode_id,\n          title: movieData.title,\n          openingText: movieData.opening_crawl,\n          releaseDate: movieData.realease_date,\n        };\n      }, []);\n      setMovies(myMovies);\n      setIsLoading(false);\n    } catch (error) {\n      setError(error.message);\n      setIsLoading(false);\n    }\n  });\n  useEffect(() => {\n    fetchMovies();\n    console.log(\"yana\");\n  }, [fetchMovies]);\n\n  return (\n    <React.Fragment>\n      <section>\n        <button onClick={fetchMovies}>Fetch Movies</button>\n      </section>\n      <section>\n        {!isLoading && <MoviesList movies={movies} />}\n        {!isLoading && movies.length === 0 && !error && <p>no Movies</p>}\n\n        {isLoading && <p>loading</p>}\n        {error && !isLoading && <p>{error}</p>}\n\n        <MoviesList movies={movies} />\n      </section>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}